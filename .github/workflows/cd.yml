name: Continuous Deployment

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  BIN_NAME: git-revise

jobs:
  create-release:
    name: Create a release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Release Notes
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --no-exec --strip 'footer' --github-repo ${{ github.repository }}
        env:
          OUTPUT: BODY.md
      - name: Create GitHub release
        id: release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: BODY.md

  build-release:
    name: Build a release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, win-msvc]
        include:
        - build: linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-aarch64
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool musl-tools
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - name: Build release binary
        run: cargo build --target ${{ matrix.target }} --verbose --release
      - name: Build archive
        shell: bash
        run: |
          outdir="./target/${{ matrix.target }}/release"
          staging="${{ env.BIN_NAME }}-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
          mkdir -p "$staging"/doc
          cp {README.md,LICENSE} "$staging/"
          cp CHANGELOG.md "$staging/doc/"
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
          ls -l "$staging"
          cd "$staging"
          7z a "../$staging.zip" .
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
          ls -l "$staging"
          tar czf "$staging.tar.gz" -C "$staging" .
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
